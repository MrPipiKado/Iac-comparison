AWSTemplateFormatVersion: "2010-09-09"
Description: "Natwork layer of our application"
Parameters:
  ApplicationVPCCIDR: 
    Description: "Application VPC CIDR range"
    Type: String
    Default: 10.0.0.0/8
  DBVPCCIDR: 
    Description: "Application VPC CIDR range"
    Type: String
    Default: 192.168.0.0/16
Resources: 

  
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref ApplicationVPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref ApplicationVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt ApplicationVPC.CidrBlock, 4, 8]]
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt ApplicationVPC.CidrBlock, 4, 8]]
  PrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt ApplicationVPC.CidrBlock, 4, 8]]
  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt ApplicationVPC.CidrBlock, 4, 8]]

  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
  PrivateAppRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
  InternetGatewayRoute: 
    Type: AWS::EC2::Route,
    DependsOn: AttachGateway
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1InternetGatewayRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2InternetGatewayRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet1AppRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateAppSubnet1
      RouteTableId: !Ref PrivateAppRouteTable
  PrivateSubnet2AppRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateAppSubnet2
      RouteTableId: !Ref PrivateAppRouteTable



  DBVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref DBVPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DBVPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt DBVPC.CidrBlock, 4, 8]]
  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DBVPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt DBVPC.CidrBlock, 4, 8]]
      
  PrivateDBRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DBVPC
  PrivateSubnet1DBRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateDBSubnet1
      RouteTableId: !Ref PrivateDBRouteTable
  PrivateSubnet2DBRouteTableAssociation: 
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      SubnetId: !Ref PrivateDBSubnet2
      RouteTableId: !Ref PrivateDBRouteTable

  

  PeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref ApplicationVPC
      PeerVpcId: !Ref DBVPC
  PrivateAppPeeringRoute: 
    Type: AWS::EC2::Route,
    DependsOn: PeeringConnection
    Properties: 
      RouteTableId: !Ref PrivateAppRouteTable
      DestinationCidrBlock: !GetAtt DBVPC.CidrBlock
      VpcPeeringConnectionId: !Ref PeeringConnection
  PrivateDBPeeringRoute: 
    Type: AWS::EC2::Route,
    DependsOn: PeeringConnection
    Properties: 
      RouteTableId: !Ref PrivateAppRouteTable
      DestinationCidrBlock: !GetAtt ApplicationVPC.CidrBlock
      VpcPeeringConnectionId: !Ref PeeringConnection
  
  